parameters:
- name: image
  displayName: Pool Image
  type: string
  default: ubuntu-latest
  values:
  - windows-latest
  - ubuntu-latest
  - macOS-latest
- name: environment
  displayName: Dev, Qa and Prod
  type: string
  default: none
  values:
    - Dev
    - Qa
    - Prod
    - none
- name: HeadRefs
  displayName: Dev, Qa and prod Refs
  type: string
  default: none
  values:
    - refs/heads/Dev
    - refs/heads/Qa
    - refs/heads/Prod
    - none

variables:
 - name: poolImage
   value: ${{parameters.image}}
 - name: environments
   value: ${{parameters.environment}}
 - template: variables.yml
 - template: Deployment-connections/Dev.yml
 - template: Deployment-connections/QA.yaml
 - template: Deployment-connections/Prod.yaml
 
resources:
 repositories:
   - repository: React-App
     type: git
     name: Abdul/React-App
     ref: ${{parameters.HeadRefs}}
     trigger:
      branches:
        include:
          #- Dev
          - Qa
          - Prod

trigger: none
 
pool:
  vmImage: $(poolImage)

stages:
  - stage: build
    jobs:  
      - template: Yaml-pipeline-react-app-build.yml
 
  - stage: deploytoDev
    dependsOn: Build
    condition: and(succeeded(), or(
        and(eq(variables['isDev'], 'true'), ne(variables['isQA'], 'true'), ne(variables['isPROD'], 'true')),
        eq(variables['environments'], 'Dev')
      ))
    jobs:
    - job: deploy
      pool:
        vmImage: $(poolImage)
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: $(ArtifactName)
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: AzureRmWebAppDeployment@4
        displayName: deploy to Dev
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: 'WebApps-Service-Connection'
          appType: 'webAppLinux'
          WebAppName: 'Dev-react-application'
          packageForLinux: '$(System.ArtifactsDirectory)/$(ArtifactName)/*.zip'
          RuntimeStack: 'NODE|lts'
          StartupCommand: 'pm2 serve /home/site/wwwroot --no-daemon --spa'
  
  - stage: deploytoQA
    dependsOn: Build
    condition: and(succeeded(), or(
        and(ne(variables['isDev'], 'true'), eq(variables['isQA'], 'true'), ne(variables['isPROD'], 'true')),
        eq(variables['environments'], 'Qa')
      )) 
    jobs:
    - job: deploy
      pool:
        vmImage: $(poolImage)
      steps:
      - task: DownloadBuildArtifacts@1
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: $(ArtifactName)
          downloadPath: '$(System.ArtifactsDirectory)'      
      
      - task: AzureRmWebAppDeployment@4
        displayName: deploy to QA
        inputs:
          ConnectionType: 'AzureRM'
          azureSubscription: WebApps-Service-Connection
          appType: 'webAppLinux'
          WebAppName: $(WebAppNameQA)
          packageForLinux: '$(System.ArtifactsDirectory)/$(ArtifactName)/*.zip'
          RuntimeStack: 'NODE|lts'
          StartupCommand: 'pm2 serve /home/site/wwwroot --no-daemon --spa'
        
  - stage: deploytoProd
    dependsOn: Build
    condition: and(succeeded(), or(
        and(ne(variables['isDev'], 'true'), ne(variables['isQA'], 'true'), eq(variables['isPROD'], 'true')),
        eq(variables['environments'], 'Prod')
      ))
    displayName: deploy to Prod
    jobs:
    - job: deploy
      pool:
        vmImage: $(poolImage)
      steps:
        - task: DownloadBuildArtifacts@1
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: $(ArtifactName)
            downloadPath: '$(System.ArtifactsDirectory)'
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'WebApps-Service-Connection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: 'az webapp deployment slot create --name Prod-react-application --resource-group WebApps --slot staging'
        
        - task: AzureRmWebAppDeployment@4
          inputs:
            ConnectionType: 'AzureRM'
            azureSubscription: 'WebApps-Service-Connection'
            appType: 'webAppLinux'
            WebAppName: $(WebAppNameProd)
            deployToSlotOrASE: true
            ResourceGroupName: 'WebApps'
            SlotName: 'staging'
            packageForLinux: '$(System.ArtifactsDirectory)/$(ArtifactName)/*.zip'
            RuntimeStack: 'NODE|lts'
            StartupCommand: 'pm2 serve /home/site/wwwroot --no-daemon --spa'

        - task: AzureAppServiceManage@0
          inputs:
            azureSubscription: 'WebApps-Service-Connection'
            Action: 'Swap Slots'
            WebAppName: $(WebAppNameProd)
            ResourceGroupName: 'WebApps'
            SourceSlot: 'staging'
      